---

variables:
# Suitesparse, as installed with Debian, is thread-parallel using OpenMP.
# OpenMP silently assumes, it can spawn as many threads as there are cores.
# In a worst case scenario, this leads to a number of threads quadratic in
# the core count, if you also do parallel test execution with the maximum
# number of cores. We solve the issue by disallowing OpenMP to allocate more
# than one thread.
  OMP_NUM_THREADS: 1
  DUNECI_PARALLEL: 4

before_script:
  - . /duneci/bin/duneci-init-job
  - duneci-install-module https://gitlab.dune-project.org/core/dune-common.git
  - duneci-install-module https://gitlab.dune-project.org/core/dune-geometry.git
  - duneci-install-module https://gitlab.dune-project.org/core/dune-localfunctions.git
  - duneci-install-module https://gitlab.dune-project.org/staging/dune-uggrid.git
  - duneci-install-module https://gitlab.dune-project.org/core/dune-grid.git
  - duneci-install-module https://gitlab.dune-project.org/core/dune-istl.git
  - duneci-install-module https://gitlab.dune-project.org/staging/dune-typetree.git
  - duneci-install-module https://gitlab.dune-project.org/staging/dune-functions.git

.common: &common
  script:
    - duneci-standard-test
    # test tutorials as well
    - export DUNE_CONTROL_PATH=$(pwd):/duneci/modules:$DUNE_CONTROL_PATH
    - duneci-install-module https://gitlab.dune-project.org/pdelab/dune-pdelab-tutorials.git

debian:10--gcc:
  <<: *common
  image: registry.dune-project.org/docker/ci/debian:10
  tags:
    - "cores:4"
    - "mem:16G"
  variables:
    DUNECI_TOOLCHAIN: gcc-7-17
  artifacts:
    reports:
      junit: junit/*.xml

debian:10--clang:
  <<: *common
  image: registry.dune-project.org/docker/ci/debian:10
  variables:
    DUNECI_TOOLCHAIN: clang-6-17
  tags:
    - "cores:4"
    - "mem:16G"
  artifacts:
    reports:
      junit: junit/*.xml
